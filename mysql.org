#+TITLE: mysql相关命令参考
#+AUTHOR: vermin
#+OPTIONS: H:3 TOC:t
#+DESCRIPTION: mysql相关记录

* 导航                                                             :TOC_2_gh:
- [[#相关问题处理方式][相关问题处理方式]]
  - [[#mysql连接数满][mysql连接数满]]
  - [[#授权][授权]]
- [[#mysql相关原理备忘][MySQL相关原理备忘]]
  - [[#mysql主备数据克隆][MySQL主备数据克隆]]
  - [[#mysql性能监控][MySQL性能监控]]
  - [[#mgr][MGR]]
  - [[#sql格式的binlog如何保证主备一致][SQL格式的binlog如何保证主备一致]]
  - [[#mysql日志类型][MySQL日志类型]]

* 相关问题处理方式
** mysql连接数满
   通过gdb动态调整连接数，然后连进去后处理
   #+begin_src sh
   gdb -p ${pid} -ex "set max_connections = 10000" -batch
   #+end_src
** 授权
   #+begin_src sql
   GRANT create,alter,select,update,insert,delete ON *.* TO user@"%.%.%.%" IDENTIFIED BY 'passwd';
   GRANT REPLICATION SLAVE ON *.* TO rep@%.%.%.% IDENTIFIED BY 'rep';
   flush privileges;
   #+end_src
* MySQL相关原理备忘
** MySQL主备数据克隆
mydumper
dumpling
** MySQL性能监控
orzdba
** MGR
MGR paxos协议同步，多主模式
MHA 一主2从，优先级切换，选择gtid最大的备机同步
** SQL格式的binlog如何保证主备一致
线程级别的binlog cache，保证每个线程独立写入，保证单个事务的binlog不会被拆开，备机执行的时候按照主机的数据进行顺序执行，每个事物都是独立执行
binlog按照事务提交顺序写入，可以保证备机事务的执行顺序和主机相同
** MySQL日志类型
- binlog
  主从复制使用，事务提交的时候，一次性记录到磁盘中

  按照expire_logs_days来保存数据
- redolog
  保持事务一致性，用来恢复未写入datafile的数据
  记录物理数据页面写修改信息，顺序写入，事务执行过程中就写入，刷入磁盘以后，就释放
  先写入innodb_log_buffer，默认每秒刷新innodb_log_buffer到redolog

  ib_logfilexxx

- undolog
  事务发生前的版本，用于回滚，提供多版本下mvcc控制的读操作（非锁定读）
  事务开始之前生成undolog，undo也会产生redolog，保证事务可靠性，清理的时候是放入待清理链表，然后purge线程判断是否有事务访问，如果没失误访问，则清理undo log空间

- slow log
  慢查询

- general query log
  所有的查询
